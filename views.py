from django.shortcuts import render,HttpResponse

from django.template import loader
from food.models import Food
#import ModelForm 
from food.form import FoodForm
from food.form import CustomerForm
from food.models import Customer


# Create your views here.
IMAGE_FULE_TYPES=['png','jpg','jpeg','jfit']




# Create your views here.
def index(request):
    #1. return HttpResponse('This is index page') #display plain text
    #2. return render(request,'index.html',context) for displaying static/index.html
    #3. return template 
    #create a instance of template
    template=loader.get_template('index.html')
    #rendering template as HttpResponse    
    return HttpResponse(template.render())

def home(request):
	return HttpResponse('This is index page')
def about(request):
	return HttpResponse('This is about page ')
def contact(request):
    return HttpResponse('this is contact page')	

def dishes(request):
    
    shelf=Food.objects.all()

    return render(request,'dishes.html',{'food_shelf':shelf})

#crud -create retrieve update and delete
def upload(request):
    #using model form to specify the view(fields for the form)
    obj=FoodForm()

    if request.method=='POST':
        #once the form is submitted, fetch form params using request
        obj=FoodForm(request.POST,request.FILES)

        if obj.is_valid():
            #save the accepted/form data
            obj.save()
            #once form data or book instance is saved by backend
            #we will show that book instance on homepage
            return redirect('dishes')
        else:
            return HttpResponse("Something Wrong, reload <a href='{{url:'dishes'}}'> reload</a>")    
    else:
        #if form is loaded first time
        #we are displaying form fileds fetched from object of BookForm
        #i.e initially we are display blank form
        return render(request,'upload.html',{'upload_form':obj})

def update(request,food_id):
    #convert it to string
    food_id=int(food_id)

    try:
        #id is autogenerated field 
        #using id to fetch particular book details to update
        food_select=Food.objects.get(id=food_id)

    except Food.DoesNotExist:
        return redirect('dishes')
    else:
    #to displaying form with filled data
       food_form=FoodForm(request.POST or None,instance=food_select)    
    
    #after updating the all fields , user will submit form
    if food_form.is_valid():
        food_form.save(commit=False)
        return redirect('dishes')
    return render(request,'upload.html',{'upload_form':food_form})  

#sql queries performed by backend
#update book set name='' where book_id=1
#delete from book where book_id=1
def delete(request,food_id):
    #convert it to string
    food_id=int(food_id)
    
    try:
        #id is autogenerated field 
        #using id to fetch particular book details to update
        food_select=Food.objects.get(id=food_id)

    except Food.DoesNotExist:
        return redirect('dishes')

    food_select.delete()
    return redirect('dishes')    

def ordernow(request):
	obj=CustomerForm()

	if request.method=='POST':
		obj=CustomerForm(request.POST,request.FILES)


		if obj.is_valid():
			obj=obj.save(commit=False)
			obj.ordered_product=request.FILES['ordered_product']

				#mypic.png,jpg,  mypic.pdf==mypic.png
			file_type=obj.ordered_product.url.split('.')[-1]
			file_type=file_type.lower()

			if file_type not in IMAGE_FULE_TYPES:
				return render(request,'error.html')
			else:
				obj.save()
				return render(request,'orders.html',{'customer':obj})
			    
	context={'form':obj}
	return render(request,'customer.html',context)

